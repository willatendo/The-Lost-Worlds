package lostworlds.server.block;

import static lostworlds.LostWorldsMod.getRegistrate;
import static lostworlds.server.block.LostWorldsBlockModels.diffTexture;
import static lostworlds.server.block.LostWorldsBlockModels.diffTextureMC;
import static lostworlds.server.block.LostWorldsBlockModels.machine;
import static lostworlds.server.block.LostWorldsBlockModels.modelMcTexMc;
import static lostworlds.server.block.LostWorldsBlockModels.parent;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Supplier;

import com.tterrag.registrate.providers.RegistrateRecipeProvider;
import com.tterrag.registrate.util.DataIngredient;
import com.tterrag.registrate.util.entry.BlockEntry;
import com.tterrag.registrate.util.entry.ItemEntry;

import lostworlds.client.LostWorldsConfig;
import lostworlds.server.LostWorldsTags;
import lostworlds.server.LostWorldsUtils;
import lostworlds.server.block.tree.AraucariaTree;
import lostworlds.server.block.tree.CalamitesTree;
import lostworlds.server.block.tree.ConiferTree;
import lostworlds.server.block.tree.CypressTree;
import lostworlds.server.block.tree.GinkgoTree;
import lostworlds.server.block.tree.SequoiaTree;
import lostworlds.server.entity.utils.enums.DinoTypes;
import lostworlds.server.entity.utils.enums.ModBoatType;
import lostworlds.server.item.LostWorldsItems;
import lostworlds.server.item.ModBoatItem;
import lostworlds.server.item.WaterPlantItem;
import lostworlds.server.item.block.BrazileaItem;
import lostworlds.server.item.tool.ModMaterials;
import lostworlds.server.item.tool.ModToolTypes;
import lostworlds.server.util.LostWorldsRegistrate;
import lostworlds.server.util.registrate.DyedBlockList;
import net.minecraft.advancements.criterion.StatePropertiesPredicate;
import net.minecraft.block.AbstractBlock;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.block.DoorBlock;
import net.minecraft.block.DoublePlantBlock;
import net.minecraft.block.FenceBlock;
import net.minecraft.block.FenceGateBlock;
import net.minecraft.block.FlowerBlock;
import net.minecraft.block.FlowerPotBlock;
import net.minecraft.block.GlassBlock;
import net.minecraft.block.HayBlock;
import net.minecraft.block.LeavesBlock;
import net.minecraft.block.OreBlock;
import net.minecraft.block.PaneBlock;
import net.minecraft.block.PressurePlateBlock;
import net.minecraft.block.PressurePlateBlock.Sensitivity;
import net.minecraft.block.RedstoneOreBlock;
import net.minecraft.block.RotatedPillarBlock;
import net.minecraft.block.SandBlock;
import net.minecraft.block.SaplingBlock;
import net.minecraft.block.SlabBlock;
import net.minecraft.block.SoundType;
import net.minecraft.block.StairsBlock;
import net.minecraft.block.StandingSignBlock;
import net.minecraft.block.StoneButtonBlock;
import net.minecraft.block.TrapDoorBlock;
import net.minecraft.block.WallBlock;
import net.minecraft.block.WallSignBlock;
import net.minecraft.block.WoodButtonBlock;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.color.IBlockColor;
import net.minecraft.client.renderer.color.IItemColor;
import net.minecraft.data.ShapedRecipeBuilder;
import net.minecraft.data.ShapelessRecipeBuilder;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.EntityType;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.item.SignItem;
import net.minecraft.loot.ConstantRange;
import net.minecraft.loot.ItemLootEntry;
import net.minecraft.loot.LootPool;
import net.minecraft.loot.LootTable;
import net.minecraft.loot.RandomValueRange;
import net.minecraft.loot.conditions.BlockStateProperty;
import net.minecraft.loot.conditions.RandomChance;
import net.minecraft.loot.functions.ApplyBonus;
import net.minecraft.loot.functions.SetCount;
import net.minecraft.potion.Effects;
import net.minecraft.state.properties.DoubleBlockHalf;
import net.minecraft.tags.BlockTags;
import net.minecraft.tags.ItemTags;
import net.minecraft.util.IItemProvider;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.FoliageColors;
import net.minecraft.world.IBlockDisplayReader;
import net.minecraft.world.IBlockReader;
import net.minecraft.world.biome.BiomeColors;
import net.minecraftforge.client.model.generators.ConfiguredModel;
import net.minecraftforge.common.Tags;
import net.minecraftforge.common.ToolType;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.IForgeRegistryEntry;

public class LostWorldsBlocks {
	private static final LostWorldsRegistrate REGISTRATE = getRegistrate().itemGroup(() -> LostWorldsUtils.BLOCKS);
	public static final List<Supplier<? extends Block>> SIGN_BLOCKS = new ArrayList<>();

	public static final BlockEntry<OreBlock> COPPER_ORE = REGISTRATE.blockAndItem("copper_ore", OreBlock::new).initialProperties(() -> Blocks.COAL_ORE).register();

	// Soils
	public static final BlockEntry<DriedSoilBlock> DRIED_SOIL = REGISTRATE.blockAndItem("dried_soil", DriedSoilBlock::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.75F).harvestTool(ToolType.SHOVEL).sound(SoundType.GRAVEL).randomTicks()).tag(Tags.Blocks.DIRT).register();
	public static final BlockEntry<Block> CRACKED_SOIL = REGISTRATE.blockAndItem("cracked_soil", Block::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.75F).harvestTool(ToolType.SHOVEL).sound(SoundType.GRAVEL)).register();

	public static final BlockEntry<MossySoilBlock> MOSSY_SOIL = REGISTRATE.blockAndItem("mossy_soil", MossySoilBlock::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.5F).harvestTool(ToolType.SHOVEL).randomTicks().sound(SoundType.GRAVEL)).blockstate((block, provider) -> LostWorldsBlockModels.mossySoil(block.get(), provider)).tag(Tags.Blocks.DIRT).register();
	public static final BlockEntry<MudBlock> MUD = REGISTRATE.blockAndItem("mud", MudBlock::new).properties(properties -> properties.of(Material.CLAY, MaterialColor.COLOR_BROWN).harvestTool(ToolType.SHOVEL).strength(0.6F).sound(SoundType.GRAVEL)).recipe((item, provider) -> provider.square(DataIngredient.items(LostWorldsItems.MUD_BALL), () -> item.get(), true)).register();
	public static final BlockEntry<Block> SILT = REGISTRATE.blockAndItem("silt", Block::new).properties(properties -> properties.of(Material.CLAY, MaterialColor.COLOR_BROWN).harvestTool(ToolType.SHOVEL).strength(0.6F).sound(SoundType.GRAVEL)).register();

	public static final BlockEntry<SandBlock> VOLCANIC_ASH = REGISTRATE.blockAndItem("volcanic_ash", properties -> new SandBlock(0x888988, properties)).properties(properties -> properties.of(Material.SAND, MaterialColor.COLOR_GRAY).harvestTool(ToolType.SHOVEL).harvestLevel(1).strength(0.5F).sound(SoundType.SAND)).register();
	public static final BlockEntry<VolcanicAshLayerBlock> VOLCANIC_ASH_LAYER = REGISTRATE.blockAndItem("volcanic_ash_layer", VolcanicAshLayerBlock::new).properties(properties -> properties.of(Material.SAND, MaterialColor.COLOR_GRAY).harvestTool(ToolType.SHOVEL).harvestLevel(1).strength(0.5F).sound(SoundType.SAND)).blockstate((block, provider) -> LostWorldsBlockModels.volcanicAshLayer(block.get(), provider)).item().model((item, provider) -> provider.withExistingParent(item.getName(), LostWorldsUtils.rL("block/volcanic_ash_layer_height2"))).build().recipe((item, provider) -> ShapedRecipeBuilder.shaped(item.get()).pattern("###").define('#', LostWorldsBlocks.VOLCANIC_ASH.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.VOLCANIC_ASH.get())).save(provider)).register();

	public static final BlockEntry<SandBlock> PERMIAN_SAND = REGISTRATE.blockAndItem("permian_sand", properties -> new SandBlock(0xaa915c, properties)).properties(properties -> properties.of(Material.SAND, MaterialColor.SAND).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.SAND)).tag(Tags.Blocks.SAND, BlockTags.SAND).register(),
			ROCKY_SOIL = REGISTRATE.blockAndItem("rocky_soil", properties -> new SandBlock(0x8a8a8e, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).harvestTool(ToolType.SHOVEL).requiresCorrectToolForDrops().strength(1.5F)).register();

	public static final BlockEntry<Block> PERMAFROST = REGISTRATE.blockAndItem("permafrost", Block::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.ICE).strength(0.5F).sound(SoundType.GRAVEL)).register();

	// Stones
	public static final BlockEntry<Block> PERMIAN_STONE = REGISTRATE.blockAndItem("permian_stone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.BASE_STONE_PERMIAN, Tags.Blocks.STONE).recipe((block, provider) -> provider.smeltingAndBlasting(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get(), 0.7F)).loot((provider, block) -> provider.add(block, provider.droppingWithSilkTouch(block, LostWorldsBlocks.PERMIAN_COBBLESTONE.get()))).register();
	public static final BlockEntry<StairsBlock> PERMIAN_STONE_STAIRS = REGISTRATE.stairBlock("permian_stone_stairs", "permian_stone", properties -> new StairsBlock(() -> LostWorldsBlocks.PERMIAN_STONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> PERMIAN_STONE_SLAB = REGISTRATE.slabBlock("permian_stone_slab", "permian_stone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<PressurePlateBlock> PERMIAN_STONE_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("permian_stone_pressure_plate", "permian_stone", properties -> new PressurePlateBlock(Sensitivity.MOBS, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().strength(3.0F)).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.PERMIAN_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.PERMIAN_STONE.get())).save(provider)).register();
	public static final BlockEntry<StoneButtonBlock> PERMIAN_STONE_BUTTON = REGISTRATE.buttonBlock("permian_stone_button", "permian_stone", StoneButtonBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().strength(3.0F)).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.PERMIAN_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.PERMIAN_STONE.get())).save(provider)).register();

	public static final BlockEntry<ModOreBlock> PERMIAN_COPPER_ORE = REGISTRATE.blockAndItem("permian_copper_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).register(),
			PERMIAN_GOLD_ORE = REGISTRATE.blockAndItem("permian_gold_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_GOLD, BlockTags.GOLD_ORES, BlockTags.GUARDED_BY_PIGLINS).register(),
			PERMIAN_IRON_ORE = REGISTRATE.blockAndItem("permian_iron_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_IRON).register(),
			PERMIAN_COAL_ORE = REGISTRATE.blockAndItem("permian_coal_ore", properties -> new ModOreBlock(0, 2, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_COAL).register(),
			PERMIAN_LAPIS_ORE = REGISTRATE.blockAndItem("permian_lapis_ore", properties -> new ModOreBlock(2, 5, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_LAPIS).register(),
			PERMIAN_DIAMOND_ORE = REGISTRATE.blockAndItem("permian_diamond_ore", properties -> new ModOreBlock(3, 7, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_DIAMOND).register(),
			PERMIAN_EMERALD_ORE = REGISTRATE.blockAndItem("permian_emerald_ore", properties -> new ModOreBlock(3, 7, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_EMERALD).register();
	public static final BlockEntry<RedstoneOreBlock> PERMIAN_REDSTONE_ORE = REGISTRATE.blockAndItem("permian_redstone_ore", RedstoneOreBlock::new).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_REDSTONE).register();

	public static final BlockEntry<Block> PERMIAN_COBBLESTONE = REGISTRATE.blockAndItem("permian_cobblestone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).register();
	public static final BlockEntry<StairsBlock> PERMIAN_COBBLESTONE_STAIRS = REGISTRATE.stairBlock("permian_cobblestone_stairs", "permian_cobblestone", properties -> new StairsBlock(() -> LostWorldsBlocks.PERMIAN_COBBLESTONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> PERMIAN_COBBLESTONE_SLAB = REGISTRATE.slabBlock("permian_cobblestone_slab", "permian_cobblestone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> PERMIAN_COBBLESTONE_WALL = REGISTRATE.wallBlock("permian_cobblestone_wall", "permian_cobblestone", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> PERMIAN_STONE_BRICKS = REGISTRATE.blockAndItem("permian_stone_bricks", Block::new).properties(properties -> AbstractBlock.Properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).tag(BlockTags.STONE_BRICKS).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.PERMIAN_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.PERMIAN_STONE.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> PERMIAN_STONE_BRICK_STAIRS = REGISTRATE.stairBlock("permian_stone_brick_stairs", "permian_stone_bricks", properties -> new StairsBlock(() -> LostWorldsBlocks.PERMIAN_STONE_BRICKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE_BRICKS.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> PERMIAN_STONE_BRICK_SLAB = REGISTRATE.slabBlock("permian_stone_brick_slab", "permian_stone_bricks", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE_BRICKS.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> PERMIAN_STONE_BRICK_WALL = REGISTRATE.wallBlock("permian_stone_brick_wall", "permian_stone_bricks", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.wall(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE_BRICKS.get()), () -> block.get());
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE.get()), () -> block.get());
	}).register();

	public static final BlockEntry<Block> JURASSIC_STONE = REGISTRATE.blockAndItem("jurassic_stone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).tag(LostWorldsTags.ModBlockTags.BASE_STONE_JURASSIC, Tags.Blocks.STONE).recipe((block, provider) -> provider.smeltingAndBlasting(DataIngredient.items(LostWorldsBlocks.JURASSIC_COBBLESTONE.get()), () -> block.get(), 0.7F)).loot((provider, block) -> provider.add(block, provider.droppingWithSilkTouch(block, LostWorldsBlocks.JURASSIC_COBBLESTONE.get()))).register();
	public static final BlockEntry<StairsBlock> JURASSIC_STONE_STAIRS = REGISTRATE.stairBlock("jurassic_stone_stairs", "jurassic_stone", properties -> new StairsBlock(() -> LostWorldsBlocks.JURASSIC_STONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> JURASSIC_STONE_SLAB = REGISTRATE.slabBlock("jurassic_stone_slab", "jurassic_stone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<PressurePlateBlock> JURASSIC_STONE_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("jurassic_stone_pressure_plate", "jurassic_stone", properties -> new PressurePlateBlock(Sensitivity.MOBS, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().strength(3.0F)).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.JURASSIC_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.JURASSIC_STONE.get())).save(provider)).register();
	public static final BlockEntry<StoneButtonBlock> JURASSIC_STONE_BUTTON = REGISTRATE.buttonBlock("jurassic_stone_button", "jurassic_stone", StoneButtonBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().noCollission().strength(3.0F)).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.JURASSIC_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.JURASSIC_STONE.get())).save(provider)).register();

	public static final BlockEntry<ModOreBlock> JURASSIC_COPPER_ORE = REGISTRATE.blockAndItem("jurassic_copper_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).register(),
			JURASSIC_GOLD_ORE = REGISTRATE.blockAndItem("jurassic_gold_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_GOLD, BlockTags.GOLD_ORES, BlockTags.GUARDED_BY_PIGLINS).register(),
			JURASSIC_IRON_ORE = REGISTRATE.blockAndItem("jurassic_iron_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_IRON).register(),
			JURASSIC_COAL_ORE = REGISTRATE.blockAndItem("jurassic_coal_ore", properties -> new ModOreBlock(0, 2, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_COAL).register(),
			JURASSIC_LAPIS_ORE = REGISTRATE.blockAndItem("jurassic_lapis_ore", properties -> new ModOreBlock(2, 5, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_LAPIS).register(),
			JURASSIC_DIAMOND_ORE = REGISTRATE.blockAndItem("jurassic_diamond_ore", properties -> new ModOreBlock(3, 7, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_DIAMOND).register(),
			JURASSIC_EMERALD_ORE = REGISTRATE.blockAndItem("jurassic_emerald_ore", properties -> new ModOreBlock(3, 7, properties)).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_EMERALD).register();
	public static final BlockEntry<RedstoneOreBlock> JURASSIC_REDSTONE_ORE = REGISTRATE.blockAndItem("jurassic_redstone_ore", RedstoneOreBlock::new).properties(properties -> properties.of(Material.STONE).requiresCorrectToolForDrops().strength(3.0F, 3.0F)).tag(Tags.Blocks.ORES_REDSTONE).register();

	public static final BlockEntry<Block> JURASSIC_COBBLESTONE = REGISTRATE.blockAndItem("jurassic_cobblestone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).register();
	public static final BlockEntry<StairsBlock> JURASSIC_COBBLESTONE_STAIRS = REGISTRATE.stairBlock("jurassic_cobblestone_stairs", "jurassic_cobblestone", properties -> new StairsBlock(() -> LostWorldsBlocks.JURASSIC_COBBLESTONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.JURASSIC_COBBLESTONE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> JURASSIC_COBBLESTONE_SLAB = REGISTRATE.slabBlock("jurassic_cobblestone_slab", "jurassic_cobblestone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> JURASSIC_COBBLESTONE_WALL = REGISTRATE.wallBlock("jurassic_cobblestone_wall", "jurassic_cobblestone", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_GRAY).requiresCorrectToolForDrops().strength(3.0F)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.PERMIAN_COBBLESTONE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> JURASSIC_STONE_BRICKS = REGISTRATE.blockAndItem("jurassic_stone_bricks", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).tag(BlockTags.STONE_BRICKS).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.JURASSIC_STONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.JURASSIC_STONE.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> JURASSIC_STONE_BRICK_STAIRS = REGISTRATE.stairBlock("jurassic_stone_brick_stairs", "jurassic_stone_bricks", properties -> new StairsBlock(() -> LostWorldsBlocks.JURASSIC_STONE_BRICKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.PERMIAN_STONE_BRICKS.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> JURASSIC_STONE_BRICK_SLAB = REGISTRATE.slabBlock("jurassic_stone_brick_slab", "jurassic_stone_bricks", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE_BRICK_STAIRS.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> JURASSIC_STONE_BRICK_WALL = REGISTRATE.wallBlock("jurassic_stone_brick_wall", "jurassic_stone_bricks", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).sound(SoundType.STONE)).recipe((block, provider) -> {
		provider.wall(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE_BRICK_STAIRS.get()), () -> block.get());
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.JURASSIC_STONE.get()), () -> block.get());
	}).register();

	public static final BlockEntry<Block> METEORIC_STONE = REGISTRATE.blockAndItem("meteoric_stone", Block::new).properties(properties -> properties.of(ModMaterials.OUT_OF_THIS_WORLD, MaterialColor.TERRACOTTA_BROWN).harvestLevel(3).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)).register();
	public static final BlockEntry<StairsBlock> METEORIC_STONE_STAIRS = REGISTRATE.stairBlock("meteoric_stone_stairs", "meteoric_stone", properties -> new StairsBlock(() -> LostWorldsBlocks.METEORIC_STONE.getDefaultState(), properties)).properties(properties -> properties.of(ModMaterials.OUT_OF_THIS_WORLD, MaterialColor.TERRACOTTA_BROWN).harvestLevel(3).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.METEORIC_STONE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> METEORIC_STONE_SLAB = REGISTRATE.slabBlock("meteoric_stone_slab", "meteoric_stone", SlabBlock::new).properties(properties -> properties.of(ModMaterials.OUT_OF_THIS_WORLD, MaterialColor.TERRACOTTA_BROWN).harvestLevel(3).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.METEORIC_STONE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> METEORIC_STONE_WALL = REGISTRATE.wallBlock("meteoric_stone_wall", "meteoric_stone", WallBlock::new).properties(properties -> properties.of(ModMaterials.OUT_OF_THIS_WORLD, MaterialColor.TERRACOTTA_BROWN).harvestLevel(3).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.METEORIC_STONE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> LATERLITE = REGISTRATE.blockAndItem("laterlite", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).register();
	public static final BlockEntry<StairsBlock> LATERLITE_STAIRS = REGISTRATE.stairBlock("laterlite_stairs", "laterlite", properties -> new StairsBlock(() -> LostWorldsBlocks.LATERLITE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> LATERLITE_SLAB = REGISTRATE.slabBlock("laterlite_slab", "laterlite", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> LATERLITE_WALL = REGISTRATE.wallBlock("laterlite_wall", "laterlite", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> POLISHED_LATERLITE = REGISTRATE.blockAndItem("polished_laterlite", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.LATERLITE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.LATERLITE.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> POLISHED_LATERLITE_STAIRS = REGISTRATE.block("polished_laterlite_stairs", "polished_laterlite", properties -> new StairsBlock(() -> LostWorldsBlocks.LATERLITE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.POLISHED_LATERLITE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> POLISHED_LATERLITE_SLAB = REGISTRATE.slabBlock("polished_laterlite_slab", "polished_laterlite", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.POLISHED_LATERLITE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LATERLITE.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();

	public static final BlockEntry<Block> RAW_MARBLE = REGISTRATE.blockAndItem("raw_marble", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).register();
	public static final BlockEntry<StairsBlock> RAW_MARBLE_STAIRS = REGISTRATE.stairBlock("raw_marble_stairs", "raw_marble", properties -> new StairsBlock(() -> LostWorldsBlocks.RAW_MARBLE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> RAW_MARBLE_SLAB = REGISTRATE.slabBlock("raw_marble_slab", "raw_marble", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> RAW_MARBLE_WALL = REGISTRATE.wallBlock("raw_marble_wall", "raw_marble", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> MARBLE = REGISTRATE.blockAndItem("marble", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.RAW_MARBLE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.RAW_MARBLE.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> MARBLE_STAIRS = REGISTRATE.block("marble_stairs", "marble", properties -> new StairsBlock(() -> LostWorldsBlocks.MARBLE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.MARBLE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> MARBLE_SLAB = REGISTRATE.slabBlock("marble_slab", "marble", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.MARBLE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.RAW_MARBLE.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();

	public static final BlockEntry<Block> LIMESTONE = REGISTRATE.blockAndItem("limestone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).register();
	public static final BlockEntry<StairsBlock> LIMESTONE_STAIRS = REGISTRATE.stairBlock("limestone_stairs", "limestone", properties -> new StairsBlock(() -> LostWorldsBlocks.LIMESTONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> LIMESTONE_SLAB = REGISTRATE.slabBlock("limestone_slab", "limestone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> LIMESTONE_WALL = REGISTRATE.wallBlock("limestone_wall", "limestone", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> POLISHED_LIMESTONE = REGISTRATE.blockAndItem("polished_limestone", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.LIMESTONE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.LIMESTONE.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> POLISHED_LIMESTONE_STAIRS = REGISTRATE.stairBlock("polished_limestone_stairs", "polished_limestone", properties -> new StairsBlock(() -> LostWorldsBlocks.POLISHED_LIMESTONE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.POLISHED_LIMESTONE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> POLISHED_LIMESTONE_SLAB = REGISTRATE.slabBlock("polished_limestone_slab", "polished_limestone", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.POLISHED_LIMESTONE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIMESTONE.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();

	public static final BlockEntry<Block> VOLCANIC_ROCK = REGISTRATE.blockAndItem("volcanic_rock", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).register();
	public static final BlockEntry<StairsBlock> VOLCANIC_ROCK_STAIRS = REGISTRATE.stairBlock("volcanic_rock_stairs", "volcanic_rock", properties -> new StairsBlock(() -> VOLCANIC_ROCK.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> VOLCANIC_ROCK_SLAB = REGISTRATE.slabBlock("volcanic_rock_slab", "volcanic_rock", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> VOLCANIC_ROCK_WALL = REGISTRATE.wallBlock("volcanic_rock_wall", "volcanic_rock", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get())).register();

	public static final BlockEntry<Block> POLISHED_VOLCANIC_ROCK = REGISTRATE.blockAndItem("polished_volcanic_rock", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> {
		ShapedRecipeBuilder.shaped(block.get(), 4).pattern("XX").pattern("XX").define('X', LostWorldsBlocks.VOLCANIC_ROCK.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.VOLCANIC_ROCK.get())).save(provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> POLISHED_VOLCANIC_ROCK_STAIRS = REGISTRATE.stairBlock("polished_volcanic_rock_stairs", "polished_volcanic_rock", properties -> new StairsBlock(() -> LostWorldsBlocks.POLISHED_VOLCANIC_ROCK.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.POLISHED_VOLCANIC_ROCK.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> POLISHED_VOLCANIC_ROCK_SLAB = REGISTRATE.slabBlock("polished_volcanic_rock_slab", "polished_volcanic_rock", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.GILDED_BLACKSTONE)).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.POLISHED_VOLCANIC_ROCK.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ROCK.get()), () -> block.get());
	}).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();

	public static final BlockEntry<SoftStoneBlock> SOFT_STONE = REGISTRATE.blockAndItem("soft_stone", SoftStoneBlock::new).properties(properties -> properties.of(ModMaterials.SOFT).harvestTool(ModToolTypes.HAMMER).strength(4.0F, 0.0F).noDrops().sound(SoundType.STONE).noDrops()).blockstate(LostWorldsBlockModels.softStone()).tag(LostWorldsTags.ModBlockTags.FOSSILS).register();
	public static final BlockEntry<SoftDirtBlock> SOFT_DIRT = REGISTRATE.blockAndItem("soft_dirt", SoftDirtBlock::new).properties(properties -> properties.of(ModMaterials.SOFT).harvestTool(ModToolTypes.BRUSH).strength(4.0F, 0.0F).noDrops().sound(SoundType.GRAVEL).noDrops()).blockstate(diffTextureMC("dirt")).tag(LostWorldsTags.ModBlockTags.FOSSILS).register();
	public static final BlockEntry<PlantFossilBlock> PLANT_FOSSIL = REGISTRATE.blockItemModel("plant_fossil", "stone_fossil", PlantFossilBlock::new).properties(properties -> properties.of(ModMaterials.SOFT).harvestTool(ModToolTypes.HAMMER).strength(4.0F, 0.0F).noDrops().sound(SoundType.STONE).noDrops()).blockstate(LostWorldsBlockModels.plantFossil()).tag(LostWorldsTags.ModBlockTags.FOSSILS).register();

	public static final BlockEntry<FossilizedTrackBlock> FOSSILIZED_TRACK = REGISTRATE.blockAndItem("fossilized_track", properties -> new FossilizedTrackBlock(() -> Blocks.STONE, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F).noDrops()).blockstate(modelMcTexMc("cube", new String[] { "north", "east", "south", "west", "up", "down", "particle" }, new String[] { "minecraft:block/stone", "minecraft:block/stone", "minecraft:block/stone", "minecraft:block/stone", "lostworlds:block/fossilized_track_top", "minecraft:block/stone", "minecraft:block/stone" })).register();
	public static final BlockEntry<PlasteredBlock> PLASTERED_FOSSILIZED_TRACK = REGISTRATE.blockAndItem("plastered_fossilized_track", properties -> new PlasteredBlock(() -> LostWorldsBlocks.FOSSILIZED_TRACK.get(), properties)).properties(properties -> properties.of(Material.STONE).instabreak().sound(SoundType.WOOL).noDrops()).blockstate(diffTexture("plaster")).register();

	public static final BlockEntry<TinyFossilizedEggBlock> TINY_FOSSILISED_EGG = REGISTRATE.blockItemFlat("tiny_fossilized_egg", TinyFossilizedEggBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(0.5F).noOcclusion()).blockstate(LostWorldsBlockModels.tinyEgg(new ResourceLocation("block/stone"))).tag(LostWorldsTags.ModBlockTags.FOSSILS).loot((provider, block) -> provider.add(block, provider.onlyWithSilkTouch(block))).register();
	public static final BlockEntry<TinyPlasteredFossilizedEggBlock> TINY_PLASTERED_FOSSILISED_EGG = REGISTRATE.blockItemFlat("tiny_plastered_fossilized_egg", TinyPlasteredFossilizedEggBlock::new).properties(properties -> properties.of(Material.WOOL, MaterialColor.TERRACOTTA_WHITE).instabreak().noOcclusion()).blockstate(LostWorldsBlockModels.tinyEgg(LostWorldsUtils.rL("block/plastered_tiny_egg"))).register();
	public static final BlockEntry<SmallFossilizedEggBlock> SMALL_FOSSILISED_EGG = REGISTRATE.blockItemFlat("small_fossilized_egg", SmallFossilizedEggBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(0.5F).noOcclusion()).blockstate(LostWorldsBlockModels.smallEgg(new ResourceLocation("block/stone"))).tag(LostWorldsTags.ModBlockTags.FOSSILS).loot((provider, block) -> provider.add(block, provider.onlyWithSilkTouch(block))).register();
	public static final BlockEntry<SmallPlasteredFossilizedEggBlock> SMALL_PLASTERED_FOSSILISED_EGG = REGISTRATE.blockItemFlat("small_plastered_fossilized_egg", SmallPlasteredFossilizedEggBlock::new).properties(properties -> properties.of(Material.WOOL, MaterialColor.TERRACOTTA_WHITE).instabreak().noOcclusion()).blockstate(LostWorldsBlockModels.smallEgg(LostWorldsUtils.rL("block/plastered_small_egg"))).register();
	public static final BlockEntry<MediumFossilisedEggBlock> MEDIUM_FOSSILISED_EGG = REGISTRATE.blockItemFlat("medium_fossilized_egg", MediumFossilisedEggBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(0.5F).noOcclusion()).blockstate(LostWorldsBlockModels.mediumEgg(new ResourceLocation("block/stone"))).tag(LostWorldsTags.ModBlockTags.FOSSILS).loot((provider, block) -> provider.add(block, provider.onlyWithSilkTouch(block))).register();
	public static final BlockEntry<MediumPlasteredFossilizedEggBlock> MEDIUM_PLASTERED_FOSSILISED_EGG = REGISTRATE.blockItemFlat("medium_plastered_fossilized_egg", MediumPlasteredFossilizedEggBlock::new).properties(properties -> properties.of(Material.WOOL, MaterialColor.TERRACOTTA_WHITE).instabreak().noOcclusion()).blockstate(LostWorldsBlockModels.mediumEgg(LostWorldsUtils.rL("block/plastered_medium_egg"))).register();
	public static final BlockEntry<LargeFossilisedEggBlock> LARGE_FOSSILISED_EGG = REGISTRATE.blockItemFlat("large_fossilized_egg", LargeFossilisedEggBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().strength(0.5F).noOcclusion()).blockstate(LostWorldsBlockModels.largeEgg(new ResourceLocation("block/stone"))).tag(LostWorldsTags.ModBlockTags.FOSSILS).loot((provider, block) -> provider.add(block, provider.onlyWithSilkTouch(block))).register();
	public static final BlockEntry<LargePlasteredFossilizedEggBlock> LARGE_PLASTERED_FOSSILISED_EGG = REGISTRATE.blockItemFlat("large_plastered_fossilized_egg", LargePlasteredFossilizedEggBlock::new).properties(properties -> properties.of(Material.WOOL, MaterialColor.TERRACOTTA_WHITE).instabreak().noOcclusion()).blockstate(LostWorldsBlockModels.largeEgg(LostWorldsUtils.rL("block/plastered_large_egg"))).register();

	// Overworld Ores
	public static final BlockEntry<ModOreBlock> AMBER_ORE = REGISTRATE.blockAndItem("amber_ore", properties -> new ModOreBlock(0, 0, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.DIRT).requiresCorrectToolForDrops().strength(1.5F, 6.0F)).loot((provider, block) -> provider.add(block, provider.droppingWithSilkTouch(block, provider.withExplosionDecay(block, ItemLootEntry.lootTableItem(LostWorldsItems.AMBER.get())).apply(ApplyBonus.addOreBonusCount(Enchantments.BLOCK_FORTUNE))))).register();
	public static final BlockEntry<ModOreRotatedPillerBlock> BASALT_DIAMOND_ORE = REGISTRATE.blockAndItem("basalt_diamond_ore", ModOreRotatedPillerBlock::new).properties(properties -> properties.copy(Blocks.BASALT)).blockstate(modelMcTexMc("cube_column", new String[] { "end", "side" }, new String[] { "minecraft:block/basalt_top", "lostworlds:block/basalt_diamond_ore_side" })).loot((provider, block) -> provider.add(block, provider.droppingWithSilkTouch(block, provider.withExplosionDecay(block, ItemLootEntry.lootTableItem(Items.DIAMOND)).apply(ApplyBonus.addOreBonusCount(Enchantments.BLOCK_FORTUNE))))).register();

	// Machines
	public static final BlockEntry<FossilCleanerBlock> FOSSIL_CLEANER = REGISTRATE.blockItemModel("fossil_cleaner", "fossil_cleaner_off", FossilCleanerBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern("$@$").pattern("T#B").pattern("$%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('B', Items.BUCKET).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();
	public static final BlockEntry<FossilGrinderBlock> FOSSIL_GRINDER = REGISTRATE.blockItemModel("fossil_grinder", "fossil_grinder_off", FossilGrinderBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern("$@$").pattern("T#D").pattern("$%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('D', Items.DIAMOND).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();
	public static final BlockEntry<DNAExtractorBlock> DNA_EXTRACTOR = REGISTRATE.blockItemModel("dna_extractor", "dna_extractor_off", DNAExtractorBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern(" @$").pattern("T#G").pattern("T%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('G', Items.GOLD_INGOT).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();
	public static final BlockEntry<AnalyzerBlock> ANALYZER = REGISTRATE.blockItemModel("analyzer", "analyzer_off", AnalyzerBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern("$@$").pattern("T#$").pattern("$%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();
	public static final BlockEntry<DNAInjectorBlock> DNA_INJECTOR = REGISTRATE.blockItemModel("dna_injector", "dna_injector_off", DNAInjectorBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern(" @$").pattern("$#G").pattern("T%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('G', Items.GOLD_INGOT).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();
	public static final BlockEntry<CultivatorBlock> CULTIVATOR = REGISTRATE.blockItemModel("cultivator", "cultivator_off", CultivatorBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_GRAY).strength(3.0f, 6.0F).requiresCorrectToolForDrops().noOcclusion().sound(SoundType.METAL)).addLayer(() -> RenderType::cutout).blockstate(machine()).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).group("mechanics").pattern("G@G").pattern("T#G").pattern("$%$").define('$', Items.IRON_INGOT).define('@', Items.REDSTONE).define('T', Blocks.CYAN_TERRACOTTA).define('#', LostWorldsItems.COMPUTER_CORE.get()).define('G', Tags.Items.GLASS).define('%', Blocks.REDSTONE_LAMP).unlockedBy("has_item", provider.hasItem(LostWorldsItems.COMPUTER_CORE.get())).save(provider)).register();

	public static final BlockEntry<ArchaeologyTableBlock> ARCHAEOLOGY_TABLE = REGISTRATE.blockAndItem("archaeology_table", ArchaeologyTableBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).blockstate(parent("archaeology_table")).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("#@#").pattern("#$#").define('#', ItemTags.PLANKS).define('@', Blocks.CRAFTING_TABLE).define('$', Blocks.BOOKSHELF).unlockedBy("has_item", provider.hasItem(Blocks.CRAFTING_TABLE)).save(provider)).register();

	public static final BlockEntry<PaleontologyTableBlock> PALEONTOLOGY_TABLE = REGISTRATE.blockAndItem("paleontology_table", PaleontologyTableBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).blockstate(parent("paleontology_table")).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("$@$").pattern("$#$").pattern("# #").define('#', ItemTags.LOGS).define('@', Blocks.CRAFTING_TABLE).define('$', ItemTags.PLANKS).unlockedBy("has_item", provider.hasItem(Blocks.CRAFTING_TABLE)).save(provider)).register();

	public static final BlockEntry<PaleobotanyTableBlock> PALEOBOTANY_TABLE = REGISTRATE.blockAndItem("paleobotany_table", PaleobotanyTableBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).blockstate(parent("paleobotany_table")).register();

	public static final BlockEntry<TimeMachineBlock> TIME_MACHINE = REGISTRATE.blockAndItem("time_machine", TimeMachineBlock::new).properties(properties -> properties.of(ModMaterials.MAGIC).harvestTool(ToolType.PICKAXE).harvestLevel(5).requiresCorrectToolForDrops().strength(50.0F, 1200.0F)).blockstate(parent("time_machine")).tag(BlockTags.DRAGON_IMMUNE, BlockTags.WITHER_IMMUNE).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("#$#").pattern("$@$").pattern("%!%").define('#', Blocks.GOLD_BLOCK).define('$', LostWorldsItems.CHARGED_CRYSTAL_SCARAB_GEM.get()).define('@', Blocks.ENCHANTING_TABLE).define('%', Blocks.OBSIDIAN).define('!', Blocks.CRYING_OBSIDIAN).unlockedBy("has_item", provider.hasItem(Blocks.ENCHANTING_TABLE)).save(provider)).register();

	public static final BlockEntry<FeedingTroughBlock> FEEDING_TROUGH = REGISTRATE.blockAndItem("feeding_trough", FeedingTroughBlock::new).properties(properties -> properties.of(Material.WOOD).harvestTool(ToolType.AXE).strength(2.5F).sound(SoundType.WOOD)).blockstate(parent("feeding_trough")).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("# #").pattern("###").define('#', ItemTags.PLANKS).unlockedBy("has_item", provider.hasItem(ItemTags.PLANKS)).save(provider)).register();

	// Museum Blocks
	public static final BlockEntry<DisplayCaseBlock> DISPLAY_CASE = REGISTRATE.blockAndItem("display_case", DisplayCaseBlock::new).properties(properties -> properties.of(Material.STONE).harvestLevel(1).requiresCorrectToolForDrops().noOcclusion().strength(4.0F, 5.0F).sound(SoundType.GLASS)).addLayer(() -> RenderType::cutout).blockstate((block, provider) -> provider.horizontalBlock(block.get(), provider.models().withExistingParent(block.getName(), provider.modLoc("block/casing")))).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("#").pattern("$").define('#', Tags.Items.GLASS).define('$', Blocks.SMOOTH_STONE).unlockedBy("has_item", provider.hasItem(Blocks.SMOOTH_STONE)).save(provider)).register();

	// Wood

	// Araucaria
	public static final BlockEntry<RotatedPillarBlock> ARAUCARIA_LOG = REGISTRATE.rotatedBlock("araucaria_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.ARAUCARIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_ARAUCARIA_LOG = REGISTRATE.rotatedBlock("stripped_araucaria_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.ARAUCARIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> ARAUCARIA_WOOD = REGISTRATE.rotatedWoodBlock("araucaria_wood", "araucaria_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.ARAUCARIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_ARAUCARIA_WOOD = REGISTRATE.rotatedWoodBlock("stripped_araucaria_wood", "araucaria_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.ARAUCARIA_LOGS).register();
	public static final BlockEntry<LeavesBlock> ARAUCARIA_LEAVES = REGISTRATE.leaves("araucaria_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> ARAUCARIA_SAPLING = REGISTRATE.sapling("araucaria_sapling", properties -> new SaplingBlock(new AraucariaTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> ARAUCARIA_PLANKS = REGISTRATE.blockAndItem("araucaria_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> ARAUCARIA_STAIRS = REGISTRATE.stairBlock("araucaria_stairs", "araucaria_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.ARAUCARIA_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> ARAUCARIA_SLAB = REGISTRATE.slabBlock("araucaria_slab", "araucaria_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> ARAUCARIA_FENCE = REGISTRATE.fenceBlock("araucaria_fence", "araucaria_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> ARAUCARIA_FENCE_GATE = REGISTRATE.fenceGateBlock("araucaria_fence_gate", "araucaria_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> ARAUCARIA_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("araucaria_pressure_plate", "araucaria_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> ARAUCARIA_BUTTON = REGISTRATE.buttonBlock("araucaria_button", "araucaria_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> ARAUCARIA_TRAPDOOR = REGISTRATE.trapdoorBlock("araucaria_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> ARAUCARIA_DOOR = REGISTRATE.doorBlock("araucaria_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> ARAUCARIA_SIGN = REGISTRATE.signBlock("araucaria_sign", "araucaria_planks", properties -> new StandingSignBlock(properties, ModWoodType.ARAUCARIA)).properties(properties -> AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> ARAUCARIA_WALL_SIGN = REGISTRATE.signBlock("araucaria_wall_sign", "araucaria_planks", properties -> new WallSignBlock(properties, ModWoodType.ARAUCARIA)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> ARAUCARIA_SIGN_ITEM = REGISTRATE.item("araucaria_sign", properties -> new SignItem(properties, ARAUCARIA_SIGN.get(), ARAUCARIA_WALL_SIGN.get())).properties((properties) -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> ARAUCARIA_BOAT = REGISTRATE.item("araucaria_boat", properties -> new ModBoatItem(ModBoatType.ARAUCARIA, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_ARAUCARIA_LOG = REGISTRATE.rotatedBlock("petrified_araucaria_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.ARAUCARIA_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_ARAUCARIA_LOG = REGISTRATE.rotatedBlock("stripped_petrified_araucaria_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Calamite
	public static final BlockEntry<RotatedPillarBlock> CALAMITES_LOG = REGISTRATE.rotatedBlock("calamites_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CALAMITES_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CALAMITES_LOG = REGISTRATE.rotatedBlock("stripped_calamites_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CALAMITES_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> CALAMITES_WOOD = REGISTRATE.rotatedWoodBlock("calamites_wood", "calamites_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CALAMITES_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CALAMITES_WOOD = REGISTRATE.rotatedWoodBlock("stripped_calamites_wood", "calamites_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CALAMITES_LOGS).register();
	public static final BlockEntry<LeavesBlock> CALAMITES_LEAVES = REGISTRATE.leaves("calamites_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> CALAMITES_SAPLING = REGISTRATE.sapling("calamites_sapling", properties -> new SaplingBlock(new CalamitesTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> CALAMITES_PLANKS = REGISTRATE.blockAndItem("calamites_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> CALAMITES_STAIRS = REGISTRATE.stairBlock("calamites_stairs", "calamites_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.CALAMITES_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> CALAMITES_SLAB = REGISTRATE.slabBlock("calamites_slab", "calamites_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> CALAMITES_FENCE = REGISTRATE.fenceBlock("calamites_fence", "calamites_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> CALAMITES_FENCE_GATE = REGISTRATE.fenceGateBlock("calamites_fence_gate", "calamites_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> CALAMITES_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("calamites_pressure_plate", "calamites_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> CALAMITES_BUTTON = REGISTRATE.buttonBlock("calamites_button", "calamites_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> CALAMITES_TRAPDOOR = REGISTRATE.trapdoorBlock("calamites_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> CALAMITES_DOOR = REGISTRATE.doorBlock("calamites_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> CALAMITES_SIGN = REGISTRATE.signBlock("calamites_sign", "calamites_planks", properites -> new StandingSignBlock(properites, ModWoodType.CALAMITES)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> CALAMITES_WALL_SIGN = REGISTRATE.signBlock("calamites_wall_sign", "calamites_planks", properties -> new WallSignBlock(properties, ModWoodType.CALAMITES)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> CALAMITES_SIGN_ITEM = REGISTRATE.item("calamites_sign", properties -> new SignItem(properties, CALAMITES_SIGN.get(), CALAMITES_WALL_SIGN.get())).properties((properties) -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> CALAMITES_BOAT = REGISTRATE.item("calamites_boat", properties -> new ModBoatItem(ModBoatType.CALAMITES, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_CALAMITES_LOG = REGISTRATE.rotatedBlock("petrified_calamites_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.CALAMITES_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_CALAMITES_LOG = REGISTRATE.rotatedBlock("stripped_petrified_calamites_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Conifer
	public static final BlockEntry<RotatedPillarBlock> CONIFER_LOG = REGISTRATE.rotatedBlock("conifer_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CONIFER_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CONIFER_LOG = REGISTRATE.rotatedBlock("stripped_conifer_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CONIFER_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> CONIFER_WOOD = REGISTRATE.rotatedWoodBlock("conifer_wood", "conifer_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CONIFER_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CONIFER_WOOD = REGISTRATE.rotatedWoodBlock("stripped_conifer_wood", "conifer_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CONIFER_LOGS).register();
	public static final BlockEntry<LeavesBlock> CONIFER_LEAVES = REGISTRATE.leaves("conifer_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> CONIFER_SAPLING = REGISTRATE.sapling("conifer_sapling", properties -> new SaplingBlock(new ConiferTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> CONIFER_PLANKS = REGISTRATE.blockAndItem("conifer_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> CONIFER_STAIRS = REGISTRATE.stairBlock("conifer_stairs", "conifer_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.CONIFER_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> CONIFER_SLAB = REGISTRATE.slabBlock("conifer_slab", "conifer_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> CONIFER_FENCE = REGISTRATE.fenceBlock("conifer_fence", "conifer_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> CONIFER_FENCE_GATE = REGISTRATE.fenceGateBlock("conifer_fence_gate", "conifer_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> CONIFER_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("conifer_pressure_plate", "conifer_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> CONIFER_BUTTON = REGISTRATE.buttonBlock("conifer_button", "conifer_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> CONIFER_TRAPDOOR = REGISTRATE.trapdoorBlock("conifer_trapdoor", TrapDoorBlock::new).properties(properties -> AbstractBlock.Properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> CONIFER_DOOR = REGISTRATE.doorBlock("conifer_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> CONIFER_SIGN = REGISTRATE.signBlock("conifer_sign", "conifer_planks", properties -> new StandingSignBlock(properties, ModWoodType.CONIFER)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> CONIFER_WALL_SIGN = REGISTRATE.signBlock("conifer_wall_sign", "conifer_planks", properties -> new WallSignBlock(properties, ModWoodType.CONIFER)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> CONIFER_SIGN_ITEM = REGISTRATE.item("conifer_sign", properties -> new SignItem(properties, CONIFER_SIGN.get(), CONIFER_WALL_SIGN.get())).properties((properties) -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> CONIFER_BOAT = REGISTRATE.item("conifer_boat", properties -> new ModBoatItem(ModBoatType.CONIFER, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_CONIFER_LOG = REGISTRATE.rotatedBlock("petrified_conifer_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.CONIFER_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_CONIFER_LOG = REGISTRATE.rotatedBlock("stripped_petrified_conifer_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Cypress
	public static final BlockEntry<RotatedPillarBlock> CYPRESS_LOG = REGISTRATE.rotatedBlock("cypress_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CYPRESS_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CYPRESS_LOG = REGISTRATE.rotatedBlock("stripped_cypress_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CYPRESS_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> CYPRESS_WOOD = REGISTRATE.rotatedWoodBlock("cypress_wood", "cypress_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CYPRESS_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_CYPRESS_WOOD = REGISTRATE.rotatedWoodBlock("stripped_cypress_wood", "cypress_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.CYPRESS_LOGS).register();
	public static final BlockEntry<LeavesBlock> CYPRESS_LEAVES = REGISTRATE.leaves("cypress_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> CYPRESS_SAPLING = REGISTRATE.sapling("cypress_sapling", properties -> new SaplingBlock(new CypressTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> CYPRESS_PLANKS = REGISTRATE.blockAndItem("cypress_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> CYPRESS_STAIRS = REGISTRATE.stairBlock("cypress_stairs", "cypress_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.CYPRESS_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> CYPRESS_SLAB = REGISTRATE.slabBlock("cypress_slab", "cypress_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> CYPRESS_FENCE = REGISTRATE.fenceBlock("cypress_fence", "cypress_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> CYPRESS_FENCE_GATE = REGISTRATE.fenceGateBlock("cypress_fence_gate", "cypress_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> CYPRESS_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("cypress_pressure_plate", "cypress_planks", properites -> new PressurePlateBlock(Sensitivity.EVERYTHING, properites)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> CYPRESS_BUTTON = REGISTRATE.buttonBlock("cypress_button", "cypress_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> CYPRESS_TRAPDOOR = REGISTRATE.trapdoorBlock("cypress_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> CYPRESS_DOOR = REGISTRATE.doorBlock("cypress_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> CYPRESS_SIGN = REGISTRATE.signBlock("cypress_sign", "cypress_planks", properties -> new StandingSignBlock(properties, ModWoodType.CYPRESS)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> CYPRESS_WALL_SIGN = REGISTRATE.signBlock("cypress_wall_sign", "cypress_planks", properties -> new WallSignBlock(properties, ModWoodType.CYPRESS)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> CYPRESS_SIGN_ITEM = REGISTRATE.item("cypress_sign", properties -> new SignItem(properties, CYPRESS_SIGN.get(), CYPRESS_WALL_SIGN.get())).properties(properties -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> CYPRESS_BOAT = REGISTRATE.item("cypress_boat", properties -> new ModBoatItem(ModBoatType.CYPRESS, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_CYPRESS_LOG = REGISTRATE.rotatedBlock("petrified_cypress_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.CYPRESS_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_CYPRESS_LOG = REGISTRATE.rotatedBlock("stripped_petrified_cypress_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Ginkgo
	public static final BlockEntry<RotatedPillarBlock> GINKGO_LOG = REGISTRATE.rotatedBlock("ginkgo_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.GINKGO_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_GINKGO_LOG = REGISTRATE.rotatedBlock("stripped_ginkgo_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.GINKGO_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> GINKGO_WOOD = REGISTRATE.rotatedWoodBlock("ginkgo_wood", "ginkgo_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.GINKGO_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_GINKGO_WOOD = REGISTRATE.rotatedWoodBlock("stripped_ginkgo_wood", "ginkgo_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.GINKGO_LOGS).register();
	public static final BlockEntry<LeavesBlock> GINKGO_LEAVES = REGISTRATE.leaves("ginkgo_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> GINKGO_SAPLING = REGISTRATE.sapling("ginkgo_sapling", properties -> new SaplingBlock(new GinkgoTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> GINKGO_PLANKS = REGISTRATE.blockAndItem("ginkgo_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> GINKGO_STAIRS = REGISTRATE.stairBlock("ginkgo_stairs", "ginkgo_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.GINKGO_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> GINKGO_SLAB = REGISTRATE.slabBlock("ginkgo_slab", "ginkgo_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> GINKGO_FENCE = REGISTRATE.fenceBlock("ginkgo_fence", "ginkgo_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> GINKGO_FENCE_GATE = REGISTRATE.fenceGateBlock("ginkgo_fence_gate", "ginkgo_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> GINKGO_PRESSURE_PLATE = REGISTRATE.block("ginkgo_pressure_plate", "ginkgo_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> GINKGO_BUTTON = REGISTRATE.buttonBlock("ginkgo_button", "ginkgo_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> GINKGO_TRAPDOOR = REGISTRATE.trapdoorBlock("ginkgo_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> GINKGO_DOOR = REGISTRATE.doorBlock("ginkgo_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> GINKGO_SIGN = REGISTRATE.signBlock("ginkgo_sign", "ginkgo_planks", properties -> new StandingSignBlock(properties, ModWoodType.GINKGO)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> GINKGO_WALL_SIGN = REGISTRATE.signBlock("ginkgo_wall_sign", "ginkgo_planks", properties -> new WallSignBlock(properties, ModWoodType.GINKGO)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> GINKGO_SIGN_ITEM = REGISTRATE.item("ginkgo_sign", properties -> new SignItem(properties, GINKGO_SIGN.get(), GINKGO_WALL_SIGN.get())).properties(properties -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> GINKGO_BOAT = REGISTRATE.item("ginkgo_boat", properties -> new ModBoatItem(ModBoatType.GINKGO, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_GINKGO_LOG = REGISTRATE.rotatedBlock("petrified_ginkgo_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.GINKGO_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_GINKGO_LOG = REGISTRATE.rotatedBlock("stripped_petrified_ginkgo_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.SAND).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Scorched
	public static final BlockEntry<RotatedPillarBlock> SCORCHED_LOG = REGISTRATE.rotatedBlock("scorched_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SCORCHED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_SCORCHED_LOG = REGISTRATE.rotatedBlock("stripped_scorched_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SCORCHED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> SCORCHED_WOOD = REGISTRATE.rotatedWoodBlock("scorched_wood", "scorched_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SCORCHED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_SCORCHED_WOOD = REGISTRATE.rotatedWoodBlock("stripped_scorched_wood", "scorched_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SCORCHED_LOGS).register();
	public static final BlockEntry<Block> SCORCHED_PLANKS = REGISTRATE.blockAndItem("scorched_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_BLACK).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> SCORCHED_STAIRS = REGISTRATE.stairBlock("scorched_stairs", "scorched_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.SCORCHED_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> SCORCHED_SLAB = REGISTRATE.slabBlock("scorched_slab", "scorched_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> SCORCHED_FENCE = REGISTRATE.fenceBlock("scorched_fence", "scorched_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> SCORCHED_FENCE_GATE = REGISTRATE.fenceGateBlock("scorched_fence_gate", "scorched_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> SCORCHED_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("scorched_pressure_plate", "scorched_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> SCORCHED_BUTTON = REGISTRATE.buttonBlock("scorched_button", "scorched_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> SCORCHED_TRAPDOOR = REGISTRATE.trapdoorBlock("scorched_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> SCORCHED_DOOR = REGISTRATE.doorBlock("scorched_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> SCORCHED_SIGN = REGISTRATE.signBlock("scorched_sign", "scorched_planks", properties -> new StandingSignBlock(properties, ModWoodType.SCORCHED)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> SCORCHED_WALL_SIGN = REGISTRATE.signBlock("scorched_wall_sign", "scorched_planks", properties -> new WallSignBlock(properties, ModWoodType.SCORCHED)).properties(properties -> properties.of(Material.WOOD, MaterialColor.SAND).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> SCORCHED_SIGN_ITEM = REGISTRATE.item("scorched_sign", properties -> new SignItem(properties, SCORCHED_SIGN.get(), SCORCHED_WALL_SIGN.get())).properties(properties -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> SCORCHED_BOAT = REGISTRATE.item("scorched_boat", properties -> new ModBoatItem(ModBoatType.SCORCHED, properties)).properties(properties -> properties.stacksTo(1)).register();

	// Sequoia
	public static final BlockEntry<RotatedPillarBlock> SEQUOIA_LOG = REGISTRATE.rotatedBlock("sequoia_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SEQUOIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_SEQUOIA_LOG = REGISTRATE.rotatedBlock("stripped_sequoia_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SEQUOIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> SEQUOIA_WOOD = REGISTRATE.rotatedWoodBlock("sequoia_wood", "sequoia_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SEQUOIA_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_SEQUOIA_WOOD = REGISTRATE.rotatedWoodBlock("stripped_sequoia_wood", "sequoia_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.SEQUOIA_LOGS).register();
	public static final BlockEntry<LeavesBlock> SEQUOIA_LEAVES = REGISTRATE.leaves("sequoia_leaves", LostWorldsBlocks::leaves).addLayer(() -> RenderType::cutout).tag(BlockTags.LEAVES).register();
	public static final BlockEntry<SaplingBlock> SEQUOIA_SAPLING = REGISTRATE.sapling("sequoia_sapling", properties -> new SaplingBlock(new SequoiaTree(), properties)).properties(properties -> properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.ANCIENT_SAPLINGS, BlockTags.SAPLINGS).register();
	public static final BlockEntry<Block> SEQUOIA_PLANKS = REGISTRATE.blockAndItem("sequoia_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.PLANKS).register();
	public static final BlockEntry<StairsBlock> SEQUOIA_STAIRS = REGISTRATE.stairBlock("sequoia_stairs", "sequoia_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.CONIFER_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_STAIRS).register();
	public static final BlockEntry<SlabBlock> SEQUOIA_SLAB = REGISTRATE.slabBlock("sequoia_slab", "sequoia_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_SLABS).register();
	public static final BlockEntry<FenceBlock> SEQUOIA_FENCE = REGISTRATE.fenceBlock("sequoia_fence", "sequoia_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).tag(BlockTags.WOODEN_FENCES).register();
	public static final BlockEntry<FenceGateBlock> SEQUOIA_FENCE_GATE = REGISTRATE.fenceGateBlock("sequoia_fence_gate", "sequoia_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).sound(SoundType.WOOD)).register();
	public static final BlockEntry<PressurePlateBlock> SEQUOIA_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("sequoia_pressure_plate", "sequoia_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_PRESSURE_PLATES).register();
	public static final BlockEntry<WoodButtonBlock> SEQUOIA_BUTTON = REGISTRATE.buttonBlock("sequoia_button", "sequoia_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noCollission().sound(SoundType.WOOD)).tag(BlockTags.WOODEN_BUTTONS).register();
	public static final BlockEntry<TrapDoorBlock> SEQUOIA_TRAPDOOR = REGISTRATE.trapdoorBlock("sequoia_trapdoor", TrapDoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_TRAPDOORS).register();
	public static final BlockEntry<DoorBlock> SEQUOIA_DOOR = REGISTRATE.doorBlock("sequoia_door", DoorBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).tag(BlockTags.WOODEN_DOORS).register();
	public static final BlockEntry<StandingSignBlock> SEQUOIA_SIGN = REGISTRATE.signBlock("sequoia_sign", "sequoia_planks", properties -> new StandingSignBlock(properties, ModWoodType.SEQUOIA)).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final BlockEntry<WallSignBlock> SEQUOIA_WALL_SIGN = REGISTRATE.signBlock("sequoia_wall_sign", "sequoia_planks", properties -> new WallSignBlock(properties, ModWoodType.SEQUOIA)).properties(properties -> properties.of(Material.WOOD, MaterialColor.TERRACOTTA_RED).harvestTool(ToolType.AXE).strength(2.0F, 3.0F).noOcclusion().noCollission().sound(SoundType.WOOD)).register();
	public static final ItemEntry<SignItem> SEQUOIA_SIGN_ITEM = REGISTRATE.item("sequoia_sign", properties -> new SignItem(properties, SEQUOIA_SIGN.get(), SEQUOIA_WALL_SIGN.get())).properties(properties -> properties.stacksTo(16)).register();
	public static final ItemEntry<ModBoatItem> SEQUOIA_BOAT = REGISTRATE.item("sequoia_boat", properties -> new ModBoatItem(ModBoatType.SEQUOIA, properties)).properties(properties -> properties.stacksTo(1)).register();

	public static final BlockEntry<PetrifiedWoodBlock> PETRIFIED_SEQUOIA_LOG = REGISTRATE.rotatedBlock("petrified_sequoia_log", properties -> new PetrifiedWoodBlock(() -> LostWorldsItems.SEQUOIA_BARK_SAMPLE.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.TERRACOTTA_RED).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();
	public static final BlockEntry<RotatedPillarBlock> STRIPPED_PETRIFIED_SEQUOIA_LOG = REGISTRATE.rotatedBlock("stripped_petrified_sequoia_log", RotatedPillarBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.TERRACOTTA_RED).strength(2.0F, 3.0F).harvestLevel(1).harvestTool(ToolType.PICKAXE).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PETRIFIED_LOGS).register();

	// Plants
	public static final BlockEntry<WaterPlantBlock> ARCHAEFRUTUS = REGISTRATE.block("archaefrutus", properties -> new WaterPlantBlock(Effects.DAMAGE_BOOST, 3, properties)).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).item(WaterPlantItem::new).model((block, provider) -> provider.generated(() -> block.get(), LostWorldsUtils.rL("block/archaefrutus"))).build().addLayer(() -> RenderType::cutout).blockstate((block, provider) -> provider.getVariantBuilder(block.get()).partialState().setModels(new ConfiguredModel(provider.models().cross(block.getName(), new ResourceLocation(block.get().getRegistryName().getNamespace(), "block/" + block.getName()))))).register();
	public static final BlockEntry<FlowerPotBlock> POTTED_ARCHAEFRUTUS = REGISTRATE.pottedBlock("potted_archaefrutus", "archaefrutus", properties -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> ARCHAEFRUTUS.get(), properties)).properties(properties -> properties.of(Material.DECORATION).instabreak().noOcclusion()).addLayer(() -> RenderType::translucent).color(() -> LostWorldsBlocks::getWaterColour).loot((provider, block) -> provider.dropPottedContents(block)).register();
	public static final BlockEntry<ModDoublePlantBlock> ALETHOPTERIS = REGISTRATE.blockItemModel("alethopteris", "alethopteris_top", ModDoublePlantBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).blockstate(LostWorldsBlockModels.alethopteris()).loot((provider, block) -> provider.add(block, LootTable.lootTable().withPool(provider.withSurvivesExplosion(block, LootPool.lootPool().setRolls(ConstantRange.exactly(1)).add(ItemLootEntry.lootTableItem(block).when(BlockStateProperty.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)))))))).register();
	public static final BlockEntry<BrazileaBlock> BRAZILEA = REGISTRATE.parentNameNoItem("brazilea", BrazileaBlock::new).properties(properties -> properties.of(Material.PLANT).instabreak().sound(SoundType.GRASS).noOcclusion().noCollission()).item(BrazileaItem::new).color(() -> LostWorldsBlocks::getGrassyItemColour).model((item, provider) -> provider.generated(() -> item.get(), LostWorldsUtils.rL("block/brazilea"))).build().addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).register();
	public static final BlockEntry<CalamtiesSuckowiiSaplingBlock> CALAMITES_SUCKOWII_SAPLING = REGISTRATE.block("calamites_suckowii_sapling", CalamtiesSuckowiiSaplingBlock::new).properties(properties -> properties.of(Material.BAMBOO_SAPLING).randomTicks().instabreak().noCollission().strength(1.0F).sound(SoundType.BAMBOO_SAPLING)).addLayer(() -> RenderType::cutout).blockstate(diffTexture("calamites_suckowii_stage0")).register();
	public static final BlockEntry<CalamtiesSuckowiiBlock> CALAMITES_SUCKOWII = REGISTRATE.blockItemFlat("calamites_suckowii", CalamtiesSuckowiiBlock::new).properties(properties -> properties.of(Material.BAMBOO, MaterialColor.PLANT).randomTicks().instabreak().strength(1.0F).sound(SoundType.BAMBOO).noOcclusion()).addLayer(() -> RenderType::cutout).blockstate(LostWorldsBlockModels.calamitesSuckowii()).register();
	public static final BlockEntry<ModDoublePlantBlock> CEPHALOTAXUS = REGISTRATE.cephalotaxus("cephalotaxus", ModDoublePlantBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).loot((provider, block) -> provider.add(block, LootTable.lootTable().withPool(provider.withSurvivesExplosion(block, LootPool.lootPool().setRolls(ConstantRange.exactly(1)).add(ItemLootEntry.lootTableItem(block).when(BlockStateProperty.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)))))))).register();
	public static final BlockEntry<CycadBlock> CYCAD = REGISTRATE.parentName("cycad", CycadBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(1.0F, 1.5F).randomTicks().noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).register();
	public static final BlockEntry<CycadBlock> DICKSONIA = REGISTRATE.parentName("dicksonia", CycadBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).harvestTool(ToolType.AXE).strength(1.0F, 1.5F).randomTicks().noOcclusion().sound(SoundType.WOOD)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).register();
	public static final BlockEntry<FlowerBlock> DILLHOFFIA = REGISTRATE.plant("dillhoffia", properties -> new FlowerBlock(Effects.BLINDNESS, 7, properties)).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(BlockTags.SMALL_FLOWERS).register();
	public static final BlockEntry<FlowerPotBlock> POTTED_DILLHOFFIA = REGISTRATE.pottedBlock("potted_dillhoffia", "dillhoffia", properties -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> DILLHOFFIA.get(), properties)).properties(properties -> properties.of(Material.DECORATION).instabreak().noOcclusion()).addLayer(() -> RenderType::cutout).loot((provider, block) -> provider.dropPottedContents(block)).register();
	public static final BlockEntry<ModDoublePlantBlock> DUISBERGIA = REGISTRATE.doublePlant("duisbergia", ModDoublePlantBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).loot((provider, block) -> provider.add(block, LootTable.lootTable().withPool(provider.withSurvivesExplosion(block, LootPool.lootPool().setRolls(ConstantRange.exactly(1)).add(ItemLootEntry.lootTableItem(block).when(BlockStateProperty.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)))))))).register();
	public static final BlockEntry<FlowerBlock> EUDICOTS = REGISTRATE.plant("eudicots", properties -> new FlowerBlock(Effects.HUNGER, 10, properties)).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(BlockTags.SMALL_FLOWERS).register();
	public static final BlockEntry<FlowerPotBlock> POTTED_EUDICOTS = REGISTRATE.pottedBlock("potted_eudicots", "eudicots", properties -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> LostWorldsBlocks.EUDICOTS.get(), properties)).properties(properties -> properties.of(Material.DECORATION).instabreak().noOcclusion()).addLayer(() -> RenderType::cutout).loot((provider, block) -> provider.dropPottedContents(block)).register();
	public static final BlockEntry<GroundFernsBlock> GROUND_FERNS = REGISTRATE.parentName("ground_ferns", GroundFernsBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).register();
	public static final BlockEntry<FlowerBlock> MAGNOLIA = REGISTRATE.plant("magnolia", properties -> new FlowerBlock(Effects.MOVEMENT_SLOWDOWN, 8, properties)).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).tag(BlockTags.SMALL_FLOWERS).register();
	public static final BlockEntry<FlowerPotBlock> POTTED_MAGNOLIA = REGISTRATE.pottedBlock("potted_magnolia", "magnolia", properties -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> LostWorldsBlocks.MAGNOLIA.get(), properties)).properties(properties -> properties.of(Material.DECORATION).instabreak().noOcclusion()).addLayer(() -> RenderType::cutout).loot((provider, block) -> provider.dropPottedContents(block)).register();
	public static final BlockEntry<ModBushBlock> OSMUNDA = REGISTRATE.parentName("osmunda", ModBushBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).register();
	public static final BlockEntry<ModBushBlock> PERMIAN_DESERT_FERNS = REGISTRATE.plant("permian_desert_ferns", ModBushBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).register();
	public static final BlockEntry<ModBushBlock> PERMIAN_DESERT_SHRUB = REGISTRATE.plant("permian_desert_shrub", ModBushBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_BROWN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).register();
	public static final BlockEntry<ModDoublePlantBlock> WILLIAMSONIA = REGISTRATE.doublePlantColoured("williamsonia", ModDoublePlantBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).loot((provider, block) -> provider.add(block, LootTable.lootTable().withPool(provider.withSurvivesExplosion(block, LootPool.lootPool().setRolls(ConstantRange.exactly(1)).add(ItemLootEntry.lootTableItem(block).when(BlockStateProperty.hasBlockStateProperties(block).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)))))))).register();
	public static final BlockEntry<ModBushBlock> ZAMITES = REGISTRATE.plantColoured("zamites", ModBushBlock::new).properties(properties -> AbstractBlock.Properties.of(Material.REPLACEABLE_PLANT, MaterialColor.COLOR_GREEN).noCollission().noOcclusion().instabreak().sound(SoundType.GRASS)).addLayer(() -> RenderType::cutout).color(() -> LostWorldsBlocks::getGrassyColour).color(() -> LostWorldsBlocks::getGrassyColour).register();

	static {
		for (DinoTypes types : DinoTypes.eggLaying()) {
			if (types.getEgg(types.getEntityType().get()) instanceof TinyEggBlock) {
				BlockEntry<Block> egg = REGISTRATE.blockItemFlatColoured(types.getId() + "_egg", "tiny_egg", types, properties -> types.getEgg(types.getEntityType().get())).color(() -> () -> LostWorldsBlocks.getEggBlock(types)).blockstate(LostWorldsBlockModels.tinyEgg()).tag(LostWorldsTags.ModBlockTags.EGGS).register();
				types.setEgg(() -> egg.get());
			} else if (types.getEgg(types.getEntityType().get()) instanceof SmallEggBlock) {
				BlockEntry<Block> egg = REGISTRATE.blockItemFlatColoured(types.getId() + "_egg", "small_egg", types, properties -> types.getEgg(types.getEntityType().get())).color(() -> () -> LostWorldsBlocks.getEggBlock(types)).blockstate(LostWorldsBlockModels.smallEgg()).tag(LostWorldsTags.ModBlockTags.EGGS).register();
				types.setEgg(() -> egg.get());
			} else if (types.getEgg(types.getEntityType().get()) instanceof MediumEggBlock) {
				BlockEntry<Block> egg = REGISTRATE.blockItemFlatColoured(types.getId() + "_egg", "medium_egg", types, properties -> types.getEgg(types.getEntityType().get())).color(() -> () -> LostWorldsBlocks.getEggBlock(types)).blockstate(LostWorldsBlockModels.mediumEgg()).tag(LostWorldsTags.ModBlockTags.EGGS).register();
				types.setEgg(() -> egg.get());
			} else if (types.getEgg(types.getEntityType().get()) instanceof LargeEggBlock) {
				BlockEntry<Block> egg = REGISTRATE.blockItemFlatColoured(types.getId() + "_egg", "large_egg", types, properties -> types.getEgg(types.getEntityType().get())).color(() -> () -> LostWorldsBlocks.getEggBlock(types)).blockstate(LostWorldsBlockModels.largeEgg()).tag(LostWorldsTags.ModBlockTags.EGGS).register();
				types.setEgg(() -> egg.get());
			}
		}

		for (DinoTypes types : DinoTypes.values()) {
			if (types == DinoTypes.NAUTILUS) {
				BlockEntry<NautilusShellBlock> shell = REGISTRATE.block("fossilized_nautilus_shell", NautilusShellBlock::new).properties(properties -> properties.of(Material.SHULKER_SHELL).instabreak().noOcclusion().sound(SoundType.ANVIL)).blockstate((block, provider) -> provider.horizontalBlock(block.get(), provider.models().withExistingParent(block.getName(), provider.modLoc("shell")).texture("shell", LostWorldsUtils.rL("block/fossilized_nautilus_shell")).texture("particle", LostWorldsUtils.rL("block/fossilized_nautilus_shell")))).register();
				types.setExtraBlock(() -> shell.get());
			}
		}
	}

	// Natural Blocks
	public static final BlockEntry<DiictodonBurrowBlock> DIICTODON_BURROW = REGISTRATE.parentName("diictodon_burrow", DiictodonBurrowBlock::new).properties(properties -> properties.of(Material.SAND, MaterialColor.SAND).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.SAND).randomTicks()).loot((provider, block) -> provider.add(block, provider.droppingWithSilkTouch(block, ItemLootEntry.lootTableItem(LostWorldsItems.FERN_LEAVES.get()).when(RandomChance.randomChance(0.125F)).apply(SetCount.setCount(RandomValueRange.between(0.0F, 4.0F)))))).register();
	public static final BlockEntry<Block> TUNNELED_SOIL = REGISTRATE.blockAndItem("tunneled_soil", Block::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).strength(0.5F).harvestTool(ToolType.SHOVEL).sound(SoundType.GRAVEL)).register();

	public static final BlockEntry<NautilusShellBlock> NAUTILUS_SHELL = REGISTRATE.block("nautilus_shell", NautilusShellBlock::new).properties(properties -> properties.of(Material.SHULKER_SHELL).instabreak().noOcclusion().sound(SoundType.ANVIL)).blockstate((block, provider) -> provider.horizontalBlock(block.get(), provider.models().withExistingParent(block.getName(), provider.modLoc("shell")))).register();

	public static final BlockEntry<GeyserBlock> GEYSER_BLOCK = REGISTRATE.parentName("geyser_block", GeyserBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.COLOR_BLACK).strength(0.75F).noOcclusion()).loot((provider, block) -> provider.dropWhenSilkTouch(block)).register();

	public static final BlockEntry<Block> NESTING_BLOCK = REGISTRATE.parentName("nesting_block", Block::new).properties(properties -> properties.of(Material.PLANT, MaterialColor.COLOR_BROWN).harvestTool(ToolType.SHOVEL).strength(0.3F).noOcclusion().sound(SoundType.GRASS)).loot((provider, block) -> provider.dropWhenSilkTouch(block)).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("$#").pattern("#$").define('$', Blocks.DIRT).define('#', LostWorldsItems.MUD_BALL.get()).unlockedBy("has_item", provider.hasItem(LostWorldsItems.MUD_BALL.get())).save(provider)).register();

	public static final BlockEntry<DeadSpongeColonyBlock> DEAD_SPONGE_COLONY = REGISTRATE.parentName("dead_sponge_colony", DeadSpongeColonyBlock::new).properties(properties -> properties.of(Material.REPLACEABLE_PLANT, MaterialColor.STONE).noOcclusion().strength(1.5F, 6.0F).sound(SoundType.GRASS)).tag(BlockTags.CORAL_BLOCKS, BlockTags.CORAL_PLANTS).loot((provider, block) -> provider.dropWhenSilkTouch(block)).register();
	public static final BlockEntry<SpongeColonyBlock> SPONGE_COLONY = REGISTRATE.parentName("sponge_colony", properties -> new SpongeColonyBlock(() -> LostWorldsBlocks.DEAD_SPONGE_COLONY.get(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).requiresCorrectToolForDrops().noOcclusion().strength(1.5F, 6.0F).sound(SoundType.CORAL_BLOCK)).tag(BlockTags.CORAL_BLOCKS, BlockTags.CORAL_PLANTS).loot((provider, block) -> provider.dropWhenSilkTouch(block)).register();

	// Jurassic Park Building Blocks
	public static final BlockEntry<Block> LIGHT_CONCRETE = REGISTRATE.blockAndItem("light_concrete", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 8).pattern("#$#").pattern("#$#").pattern("#$#").define('#', Blocks.STONE).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(Blocks.STONE)).save(provider)).register();
	public static final BlockEntry<StairsBlock> LIGHT_CONCRETE_STAIRS = REGISTRATE.stairBlock("light_concrete_stairs", "light_concrete", properties -> new StairsBlock(() -> LostWorldsBlocks.LIGHT_CONCRETE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> LIGHT_CONCRETE_SLAB = REGISTRATE.slabBlock("light_concrete_slab", "light_concrete", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> LIGHT_CONCRETE_WALL = REGISTRATE.wallBlock("light_concrete_wall", "light_concrete", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).noCollission().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE), () -> block.get())).register();
	public static final BlockEntry<PressurePlateBlock> LIGHT_CONCRETE_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("light_concrete_pressure_plate", "light_concrete", properties -> new PressurePlateBlock(Sensitivity.MOBS, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).noCollission().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.LIGHT_CONCRETE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.LIGHT_CONCRETE.get())).save(provider)).register();
	public static final BlockEntry<StoneButtonBlock> LIGHT_CONCRETE_BUTTON = REGISTRATE.buttonBlock("light_concrete_button", "light_concrete", StoneButtonBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.0F, 8.0F).noCollission().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.LIGHT_CONCRETE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.LIGHT_CONCRETE.get())).save(provider)).register();

	public static final BlockEntry<ConnectedTexturesBlock> POLISHED_LIGHT_CONCRETE = REGISTRATE.blockAndItem("polished_light_concrete", properties -> new ConnectedTexturesBlock("polished_light_concrete", true, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.5F, 8.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE.get()), () -> block.get())).register();

	public static final BlockEntry<Block> ACCENT_LIGHT_CONCRETE = REGISTRATE.blockAndItem("accent_light_concrete", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.5F, 8.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> {
		squareRecipe(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE.get()), () -> block.get(), true, provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> ACCENT_LIGHT_CONCRETE_STAIRS = REGISTRATE.stairBlock("accent_light_concrete_stairs", "accent_light_concrete", properties -> new StairsBlock(() -> LostWorldsBlocks.LIGHT_CONCRETE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.5F, 8.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.ACCENT_LIGHT_CONCRETE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE.get()), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> ACCENT_LIGHT_CONCRETE_SLAB = REGISTRATE.slabBlock("accent_light_concrete_slab", "accent_light_concrete", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.5F, 8.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.LIGHT_CONCRETE).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.ACCENT_LIGHT_CONCRETE.get()), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.LIGHT_CONCRETE.get()), () -> block.get());
	}).register();

	public static final BlockEntry<Block> WOODEN_PLANKS = REGISTRATE.blockAndItem("wooden_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 8).pattern("#$#").pattern("#$#").pattern("#$#").define('#', ItemTags.PLANKS).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(ItemTags.PLANKS)).save(provider)).register();
	public static final BlockEntry<StairsBlock> WOODEN_PLANKS_STAIRS = REGISTRATE.stairBlock("wooden_planks_stairs", "wooden_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.WOODEN_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.WOODEN_PLANKS.get()), () -> block.get(), null, false)).register();
	public static final BlockEntry<SlabBlock> WOODEN_PLANKS_SLAB = REGISTRATE.slabBlock("wooden_planks_slab", "wooden_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.WOODEN_PLANKS.get()), () -> block.get(), null, false)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<FenceBlock> WOODEN_PLANKS_FENCE = REGISTRATE.fenceBlock("wooden_planks_fence", "wooden_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> provider.fence(DataIngredient.items(LostWorldsBlocks.WOODEN_PLANKS.get()), () -> block.get(), null)).register();
	public static final BlockEntry<FenceGateBlock> WOODEN_PLANKS_FENCE_GATE = REGISTRATE.fenceGateBlock("wooden_planks_fence_gate", "wooden_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> provider.fenceGate(DataIngredient.items(LostWorldsBlocks.WOODEN_PLANKS.get()), () -> block.get(), null)).register();
	public static final BlockEntry<PressurePlateBlock> WOODEN_PLANKS_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("wooden_planks_pressure_plate", "wooden_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).noCollission().sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.WOODEN_PLANKS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.WOODEN_PLANKS.get())).save(provider)).register();
	public static final BlockEntry<WoodButtonBlock> WOODEN_PLANKS_BUTTON = REGISTRATE.buttonBlock("wooden_planks_button", "wooden_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(1.2F, 0.5F).noCollission().sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.WOODEN_PLANKS).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.WOODEN_PLANKS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.WOODEN_PLANKS.get())).save(provider)).register();

	public static final BlockEntry<FenceBlock> METAL_FENCE = REGISTRATE.fenceBlock("metal_fence", "metal_fence", FenceBlock::new).properties(properties -> properties.of(Material.METAL, MaterialColor.COLOR_RED).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(4.5F, 6.0F).sound(SoundType.METAL)).tag(LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, BlockTags.FENCES).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 32).pattern("#$#").pattern("#@#").define('#', Blocks.IRON_BLOCK).define('$', Items.IRON_INGOT).define('@', Items.RED_DYE).unlockedBy("has_item", provider.hasItem(Items.RED_DYE)).save(provider)).register();

	public static final BlockEntry<HayBlock> THATCH_BUNDLE = REGISTRATE.blockAndItem("thatch_bundle", HayBlock::new).properties(properties -> properties.copy(Blocks.HAY_BLOCK)).blockstate(LostWorldsBlockModels.thatch(LostWorldsUtils.rL("block/thatch_bundle_side"), new ResourceLocation("block/hay_block_top"))).tag(LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA).recipe((block, provider) -> squareRecipe(DataIngredient.items(Items.WHEAT), () -> block.get(), true, provider)).register();

	public static final BlockEntry<DoorBlock> OUTDOOR_TOILET_DOOR = REGISTRATE.doorBlock("outdoor_toilet_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.OAK_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA).recipe((block, provider) -> provider.door(DataIngredient.items(LostWorldsBlocks.WOODEN_PLANKS), () -> block.get(), null)).register();
	public static final BlockEntry<DoorBlock> VISITOR_CENTER_DOOR = REGISTRATE.doorBlock("visitor_center_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.OAK_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("#$").pattern("$#").pattern("##").define('#', ItemTags.PLANKS).define('$', Blocks.BLUE_STAINED_GLASS_PANE).unlockedBy("has_item", provider.hasItem(ItemTags.PLANKS)).save(provider)).register();
	public static final BlockEntry<DoorBlock> SECURITY_DOOR = REGISTRATE.doorBlock("security_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.IRON_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("##").pattern("#$").pattern("##").define('#', Items.IRON_INGOT).define('$', Blocks.IRON_BLOCK).unlockedBy("has_item", provider.hasItem(Blocks.IRON_BLOCK)).save(provider)).register();

	// Jurassic World Building Blocks
	public static final BlockEntry<Block> DARK_CONCRETE = REGISTRATE.blockAndItem("dark_concrete", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 8).pattern("#$#").pattern("#$#").pattern("#$#").define('#', Blocks.CYAN_TERRACOTTA).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(Blocks.CYAN_TERRACOTTA)).save(provider)).register();
	public static final BlockEntry<StairsBlock> DARK_CONCRETE_STAIRS = REGISTRATE.stairBlock("dark_concrete_stairs", "dark_concrete", properties -> new StairsBlock(() -> LostWorldsBlocks.DARK_CONCRETE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> DARK_CONCRETE_SLAB = REGISTRATE.slabBlock("dark_concrete_slab", "dark_concrete", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE.get()), () -> block.get(), null, true)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<WallBlock> DARK_CONCRETE_WALL = REGISTRATE.wallBlock("dark_concrete_wall", "dark_concrete", WallBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> provider.wall(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE.get()), () -> block.get())).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.DARK_CONCRETE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.DARK_CONCRETE.get())).save(provider)).register();
	public static final BlockEntry<PressurePlateBlock> DARK_CONCRETE_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("dark_concrete_pressure_plate", "dark_concrete", properties -> new PressurePlateBlock(Sensitivity.MOBS, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).noCollission().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.DARK_CONCRETE.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.DARK_CONCRETE.get())).save(provider)).register();
	public static final BlockEntry<StoneButtonBlock> DARK_CONCRETE_BUTTON = REGISTRATE.buttonBlock("dark_concrete_button", "dark_concrete", StoneButtonBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.0F, 10.0F).noCollission().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).register();

	public static final BlockEntry<ConnectedTexturesBlock> POLISHED_DARK_CONCRETE = REGISTRATE.blockAndItem("polished_dark_concrete", properties -> new ConnectedTexturesBlock("polished_dark_concrete", true, properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(6.5F, 8.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> provider.stonecutting(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE), () -> block.get())).register();

	public static final BlockEntry<Block> ACCENT_DARK_CONCRETE = REGISTRATE.blockAndItem("accent_dark_concrete", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.5F, 10.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> {
		squareRecipe(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE.get()), () -> block.get(), true, provider);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE), () -> block.get());
	}).register();
	public static final BlockEntry<StairsBlock> ACCENT_DARK_CONCRETE_STAIRS = REGISTRATE.stairBlock("accent_dark_concrete_stairs", "accent_dark_concrete", properties -> new StairsBlock(() -> LostWorldsBlocks.DARK_CONCRETE.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.5F, 10.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> {
		provider.stairs(DataIngredient.items(LostWorldsBlocks.ACCENT_DARK_CONCRETE), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE), () -> block.get());
	}).register();
	public static final BlockEntry<SlabBlock> ACCENT_DARK_CONCRETE_SLAB = REGISTRATE.slabBlock("accent_dark_concrete_slab", "accent_dark_concrete", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(2).requiresCorrectToolForDrops().strength(8.5F, 10.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.DARK_CONCRETE).recipe((block, provider) -> {
		provider.slab(DataIngredient.items(LostWorldsBlocks.ACCENT_DARK_CONCRETE), () -> block.get(), null, true);
		provider.stonecutting(DataIngredient.items(LostWorldsBlocks.DARK_CONCRETE), () -> block.get());
	}).register();

	public static final BlockEntry<Block> REFINED_WOODEN_PLANKS = REGISTRATE.blockAndItem("refined_wooden_planks", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("###").pattern("#@#").pattern("###").define('#', LostWorldsBlocks.WOODEN_PLANKS.get()).define('@', Items.HONEYCOMB).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.WOODEN_PLANKS.get())).save(provider)).register();
	public static final BlockEntry<StairsBlock> REFINED_WOODEN_PLANKS_STAIRS = REGISTRATE.stairBlock("refined_wooden_planks_stairs", "refined_wooden_planks", properties -> new StairsBlock(() -> LostWorldsBlocks.REFINED_WOODEN_PLANKS.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.REFINED_WOODEN_PLANKS), () -> block.get(), null, false)).register();
	public static final BlockEntry<SlabBlock> REFINED_WOODEN_PLANKS_SLAB = REGISTRATE.slabBlock("refined_wooden_planks_slab", "refined_wooden_planks", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.REFINED_WOODEN_PLANKS), () -> block.get(), null, false)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();
	public static final BlockEntry<FenceBlock> REFINED_WOODEN_PLANKS_FENCE = REGISTRATE.fenceBlock("refined_wooden_planks_fence", "refined_wooden_planks", FenceBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> provider.fence(DataIngredient.items(LostWorldsBlocks.REFINED_WOODEN_PLANKS), () -> block.get(), null)).register();
	public static final BlockEntry<FenceGateBlock> REFINED_WOODEN_PLANKS_FENCE_GATE = REGISTRATE.fenceGateBlock("refined_wooden_planks_fence_gate", "refined_wooden_planks", FenceGateBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> provider.fenceGate(DataIngredient.items(LostWorldsBlocks.REFINED_WOODEN_PLANKS), () -> block.get(), null)).register();
	public static final BlockEntry<PressurePlateBlock> REFINED_WOODEN_PLANKS_PRESSURE_PLATE = REGISTRATE.pressurePlateBlock("refined_wooden_planks_pressure_plate", "refined_wooden_planks", properties -> new PressurePlateBlock(Sensitivity.EVERYTHING, properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).noCollission().sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("XX").define('X', LostWorldsBlocks.REFINED_WOODEN_PLANKS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.REFINED_WOODEN_PLANKS.get())).save(provider)).register();
	public static final BlockEntry<WoodButtonBlock> REFINED_WOODEN_PLANKS_BUTTON = REGISTRATE.buttonBlock("refined_wooden_planks_button", "refined_wooden_planks", WoodButtonBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).noCollission().sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.REFINED_WOODEN_PLANKS).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get()).requires(LostWorldsBlocks.REFINED_WOODEN_PLANKS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.REFINED_WOODEN_PLANKS.get())).save(provider)).register();

	public static final BlockEntry<Block> TILE = REGISTRATE.blockAndItem("tile", Block::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get()).pattern("#$").pattern("$#").define('#', LostWorldsBlocks.REFINED_WOODEN_PLANKS.get()).define('$', LostWorldsBlocks.WOODEN_PLANKS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.REFINED_WOODEN_PLANKS.get()))).register();
	public static final BlockEntry<StairsBlock> TILE_STAIRS = REGISTRATE.stairBlock("tile_stairs", "tile", properties -> new StairsBlock(() -> LostWorldsBlocks.TILE.getDefaultState(), properties)).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.TILE), () -> block.get(), null, false)).register();
	public static final BlockEntry<SlabBlock> TILE_SLAB = REGISTRATE.slabBlock("tile_slab", "tile", SlabBlock::new).properties(properties -> properties.of(Material.WOOD, MaterialColor.WOOD).harvestTool(ToolType.AXE).harvestLevel(0).strength(2.7F, 1.9F).sound(SoundType.WOOD)).tag(LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.TILE), () -> block.get(), null, false)).loot((provider, block) -> provider.add(block, provider.droppingSlab(block))).register();

	public static final BlockEntry<StandingSignBlock> GLASS_SIGN = REGISTRATE.signBlock("glass_sign", "glass_sign_particle", properties -> new StandingSignBlock(properties, ModWoodType.GLASS)).properties(properties -> properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).instabreak().noOcclusion().noCollission().sound(SoundType.GLASS)).tag(LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).register();
	public static final BlockEntry<WallSignBlock> GLASS_WALL_SIGN = REGISTRATE.signBlock("glass_wall_sign", "glass_sign_particle", properties -> new WallSignBlock(properties, ModWoodType.GLASS)).properties(properties -> properties.of(Material.GLASS, MaterialColor.COLOR_BLACK).instabreak().noOcclusion().noCollission().sound(SoundType.GLASS)).tag(LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).register();
	public static final ItemEntry<SignItem> GLASS_SIGN_ITEM = REGISTRATE.item("glass_sign", properties -> new SignItem(properties, GLASS_SIGN.get(), GLASS_WALL_SIGN.get())).properties(properties -> properties.stacksTo(16)).tag(LostWorldsTags.ModItemTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("###").pattern("###").pattern(" @ ").define('#', Tags.Items.GLASS).define('@', Items.STICK).unlockedBy("has_item", provider.hasItem(Tags.Items.GLASS)).save(provider)).register();

	public static final BlockEntry<DoorBlock> GLASS_SHOP_DOOR = REGISTRATE.doorBlock("glass_shop_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.OAK_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("##").pattern("$$").pattern("##").define('#', Tags.Items.GLASS).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(Tags.Items.GLASS)).save(provider)).register();
	public static final BlockEntry<DoorBlock> INNOVATION_CENTER_DOOR = REGISTRATE.doorBlock("innovation_center_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.OAK_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.door(DataIngredient.items(Blocks.STONE), () -> block.get(), null)).register();
	public static final BlockEntry<DoorBlock> BACK_DOOR = REGISTRATE.doorBlock("back_door", DoorBlock::new).properties(properties -> properties.copy(Blocks.IRON_DOOR)).addLayer(() -> RenderType::cutout).tag(LostWorldsTags.ModBlockTags.DECORATIVE_DOORS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("#$").pattern("##").pattern("##").define('#', Items.IRON_INGOT).define('$', Blocks.CYAN_TERRACOTTA).unlockedBy("has_item", provider.hasItem(Items.IRON_INGOT)).save(provider)).register();

	public static final BlockEntry<GlassBlock> CLEAR_GLASS = REGISTRATE.blockAndItem("clear_glass", GlassBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).tag(Tags.Blocks.GLASS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 3).pattern("#$").pattern("$#").define('#', Tags.Items.GLASS).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(Items.IRON_INGOT)).save(provider)).register();
	public static final BlockEntry<GlassBlock> TINTED_GLASS = REGISTRATE.blockAndItem("tinted_glass", GlassBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).tag(Tags.Blocks.GLASS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).register();
	public static final BlockEntry<GlassBlock> SHADED_GLASS = REGISTRATE.blockAndItem("shaded_glass", GlassBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).tag(Tags.Blocks.GLASS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.smelting(DataIngredient.items(LostWorldsBlocks.VOLCANIC_ASH), () -> block.get(), 0.7F)).register();
	public static final DyedBlockList<GlassBlock> COLOURED_GLASS = new DyedBlockList<>((colour) -> {
		String colourName = colour.getSerializedName();
		return REGISTRATE.blockAndItem(colourName + "_glass", GlassBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).tag(Tags.Blocks.GLASS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 8).pattern("###").pattern("#$#").pattern("###").define('#', LostWorldsBlocks.CLEAR_GLASS.get()).define('$', colour.getTag()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.CLEAR_GLASS.get())).save(provider)).register();
	});
	public static final BlockEntry<PaneBlock> CLEAR_GLASS_PANE = REGISTRATE.block("clear_glass_pane", PaneBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).blockstate((block, provider) -> provider.paneBlock(block.get(), provider.modLoc("block/clear_glass"), provider.modLoc("block/clear_glass_pane_top"))).addLayer(() -> RenderType::translucent).item().model((item, provider) -> provider.generated(() -> item.get(), provider.modLoc("block/clear_glass"))).build().tag(Tags.Blocks.GLASS_PANES, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 16).pattern("###").pattern("###").define('#', LostWorldsBlocks.CLEAR_GLASS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.CLEAR_GLASS.get())).save(provider)).register();
	public static final BlockEntry<PaneBlock> TINTED_GLASS_PANE = REGISTRATE.block("tinted_glass_pane", PaneBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).blockstate((block, provider) -> provider.paneBlock(block.get(), provider.modLoc("block/tinted_glass"), provider.modLoc("block/clear_glass_pane_top"))).addLayer(() -> RenderType::translucent).item().model((item, provider) -> provider.generated(() -> item.get(), provider.modLoc("block/tinted_glass"))).build().tag(Tags.Blocks.GLASS_PANES, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 16).pattern("###").pattern("###").define('#', LostWorldsBlocks.TINTED_GLASS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.TINTED_GLASS.get())).save(provider)).register();
	public static final BlockEntry<PaneBlock> SHADED_GLASS_PANE = REGISTRATE.block("shaded_glass_pane", PaneBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).blockstate((block, provider) -> provider.paneBlock(block.get(), provider.modLoc("block/shaded_glass"), provider.modLoc("block/clear_glass_pane_top"))).addLayer(() -> RenderType::translucent).item().model((item, provider) -> provider.generated(() -> item.get(), provider.modLoc("block/shaded_glass"))).build().tag(Tags.Blocks.GLASS_PANES, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 16).pattern("###").pattern("###").define('#', LostWorldsBlocks.SHADED_GLASS.get()).unlockedBy("has_item", provider.hasItem(LostWorldsBlocks.SHADED_GLASS.get())).save(provider)).register();
	public static final DyedBlockList<PaneBlock> COLOURED_GLASS_PANE = new DyedBlockList<>((colour) -> {
		String colourName = colour.getSerializedName();
		return REGISTRATE.block(colourName + "_glass_pane", PaneBlock::new).properties(properties -> properties.of(Material.GLASS).strength(0.3F).noOcclusion().sound(SoundType.GLASS)).addLayer(() -> RenderType::translucent).blockstate((block, provider) -> provider.paneBlock(block.get(), provider.modLoc("block/" + colourName + "_glass"), provider.modLoc("block/clear_glass_pane_top"))).addLayer(() -> RenderType::translucent).item().model((item, provider) -> provider.generated(() -> item.get(), provider.modLoc("block/" + colourName + "_glass"))).build().tag(Tags.Blocks.GLASS_PANES, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 16).pattern("###").pattern("###").define('#', ForgeRegistries.ITEMS.getValue(LostWorldsUtils.rL(colourName + "_glass"))).unlockedBy("has_item", provider.hasItem(ForgeRegistries.ITEMS.getValue(LostWorldsUtils.rL(colourName + "_glass")))).save(provider)).register();
	});
	public static final DyedBlockList<Block> COLOURED_DECORATION_BLOCK = new DyedBlockList<>((colour) -> {
		String colourName = colour.getSerializedName();
		return REGISTRATE.blockAndItem(colourName + "_decoration_block", Block::new).properties(properties -> properties.of(Material.METAL, MaterialColor.METAL).requiresCorrectToolForDrops().strength(5.0F, 6.0F).sound(SoundType.METAL)).tag(LostWorldsTags.ModBlockTags.DECORATIVE_BLOCKS, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapedRecipeBuilder.shaped(block.get(), 4).pattern("#$").pattern("$#").define('#', ForgeRegistries.ITEMS.getValue(new ResourceLocation(colourName + "_concrete"))).define('$', Items.IRON_INGOT).unlockedBy("has_item", provider.hasItem(Items.IRON_INGOT)).save(provider)).register();
	});

	// Mixed Park
	public static final BlockEntry<Block> PAVEMENT = REGISTRATE.blockAndItem("pavement", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(3.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PAVEMENT, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get(), 4).requires(Blocks.STONE, 2).requires(Blocks.ANDESITE, 2).unlockedBy("has_item", provider.hasItem(Blocks.ANDESITE)).save(provider)).register();
	public static final BlockEntry<StairsBlock> PAVEMENT_SLOPE = REGISTRATE.stairBlock("pavement_slope", "pavement", properties -> new StairsBlock(() -> LostWorldsBlocks.PAVEMENT.getDefaultState(), properties)).properties(properties -> properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(3.0F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PAVEMENT, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.stairs(DataIngredient.items(LostWorldsBlocks.PAVEMENT.get()), () -> block.get(), null, true)).register();
	public static final BlockEntry<SlabBlock> RAISED_PAVEMENT = REGISTRATE.slabBlock("raised_pavement", "pavement", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GRAY).harvestTool(ToolType.PICKAXE).harvestLevel(1).strength(3.0F).requiresCorrectToolForDrops().sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.PAVEMENT, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.PAVEMENT.get()), () -> block.get(), null, true)).register();

	public static final BlockEntry<Block> GRAVEL_ROAD = REGISTRATE.blockAndItem("gravel_road", Block::new).properties(properties -> properties.of(Material.SAND, MaterialColor.TERRACOTTA_LIGHT_GRAY).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.SAND)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get(), 4).requires(Blocks.GRAVEL, 2).requires(Blocks.LIGHT_GRAY_CONCRETE_POWDER, 2).unlockedBy("has_item", provider.hasItem(Blocks.LIGHT_GRAY_CONCRETE_POWDER)).save(provider)).register();
	public static final BlockEntry<SlabBlock> RAISED_GRAVEL_ROAD = REGISTRATE.slabBlock("raised_gravel_road", "gravel_road", SlabBlock::new).properties(properties -> properties.of(Material.SAND, MaterialColor.TERRACOTTA_LIGHT_GRAY).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.SAND)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.GRAVEL_ROAD.get()), () -> block.get(), null, true)).register();

	public static final BlockEntry<Block> DIRT_ROAD = REGISTRATE.blockAndItem("dirt_road", Block::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.GRASS)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get(), 4).requires(Blocks.DIRT, 2).requires(Blocks.COARSE_DIRT, 2).unlockedBy("has_item", provider.hasItem(Blocks.COARSE_DIRT)).save(provider)).register();
	public static final BlockEntry<SlabBlock> RAISED_DIRT_ROAD = REGISTRATE.slabBlock("raised_dirt_road", "dirt_road", SlabBlock::new).properties(properties -> properties.of(Material.DIRT, MaterialColor.DIRT).harvestTool(ToolType.SHOVEL).strength(1.5F).sound(SoundType.GRASS)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.DIRT_ROAD.get()), () -> block.get(), null, true)).register();

	public static final BlockEntry<Block> PAVED_ROAD = REGISTRATE.blockAndItem("paved_road", Block::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(3.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> ShapelessRecipeBuilder.shapeless(block.get(), 4).requires(Blocks.GRAVEL, 2).requires(Blocks.LIGHT_GRAY_CONCRETE_POWDER, 2).requires(Items.WATER_BUCKET).unlockedBy("has_item", provider.hasItem(Items.WATER_BUCKET)).save(provider)).register();
	public static final BlockEntry<SlabBlock> RAISED_PAVED_ROAD = REGISTRATE.slabBlock("raised_paved_road", "paved_road", SlabBlock::new).properties(properties -> properties.of(Material.STONE, MaterialColor.STONE).harvestTool(ToolType.PICKAXE).harvestLevel(1).requiresCorrectToolForDrops().strength(3.5F).sound(SoundType.STONE)).tag(LostWorldsTags.ModBlockTags.ROADS, LostWorldsTags.ModBlockTags.JURASSIC_PARK_ERA, LostWorldsTags.ModBlockTags.JURASSIC_WORLD_ERA).recipe((block, provider) -> provider.slab(DataIngredient.items(LostWorldsBlocks.PAVED_ROAD.get()), () -> block.get(), null, true)).register();

	private static Boolean ocelotOrParrot(BlockState state, IBlockReader reader, BlockPos pos, EntityType<?> entity) {
		return entity == EntityType.OCELOT || entity == EntityType.PARROT;
	}

	private static <T extends IItemProvider & IForgeRegistryEntry<?>> void squareRecipe(DataIngredient source, Supplier<? extends T> output, boolean small, RegistrateRecipeProvider provider) {
		ShapedRecipeBuilder builder = ShapedRecipeBuilder.shaped(output.get(), 4).define('X', source);
		if (small) {
			builder.pattern("XX").pattern("XX");
		} else {
			builder.pattern("XXX").pattern("XXX").pattern("XXX");
		}
		builder.unlockedBy("has_" + provider.safeName(source), source.getCritereon(provider)).save(provider, provider.safeId(output.get()));
	}

	private static boolean never(BlockState state, IBlockReader reader, BlockPos pos) {
		return false;
	}

	private static LeavesBlock leaves(AbstractBlock.Properties properties) {
		return new LeavesBlock(properties.of(Material.LEAVES).strength(0.2F).harvestTool(ToolType.HOE).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(LostWorldsBlocks::ocelotOrParrot).isSuffocating(LostWorldsBlocks::never).isViewBlocking(LostWorldsBlocks::never));
	}

	public static IBlockColor getGrassyColour() {
		return (state, world, pos, layer) -> pos != null && world != null ? BiomeColors.getAverageGrassColor(world, pos) : FoliageColors.get(0.5D, 1.0D);
	}

	public static IItemColor getGrassyItemColour() {
		return (stack, layer) -> FoliageColors.get(0.5D, 1.0D);
	}

	public static IBlockColor getWaterColour() {
		return (state, world, pos, layer) -> world != null && pos != null ? BiomeColors.getAverageWaterColor(world, pos) : -1;
	}

	public static IBlockColor getEggBlock(DinoTypes types) {
		if (LostWorldsConfig.CLIENT_CONFIG.eggsSetColour.get()) {
			return new IBlockColor() {
				@Override
				public int getColor(BlockState state, IBlockDisplayReader reader, BlockPos pos, int layer) {
					return types.getSetEggColour();
				}
			};
		} else {
			return (state, world, pos, layer) -> pos != null && world != null ? BiomeColors.getAverageGrassColor(world, pos) : FoliageColors.get(0.5D, 1.0D);
		}
	}

	public static IItemColor getEggItem(DinoTypes types) {
		if (LostWorldsConfig.CLIENT_CONFIG.eggsSetColour.get()) {
			return new IItemColor() {
				@Override
				public int getColor(ItemStack stack, int layer) {
					return types.getSetEggColour();
				}
			};
		} else {
			return (stack, layer) -> FoliageColors.get(0.5D, 1.0D);
		}
	}

	public static void registerSignBlock(Supplier<? extends Block> sign) {
		synchronized (SIGN_BLOCKS) {
			SIGN_BLOCKS.add(sign);
		}
	}

	public static void forEachSignBlock(Consumer<? super Block> consumer) {
		SIGN_BLOCKS.forEach(block -> consumer.accept(block.get()));
	}

	public static void init() {
		// Signs
		registerSignBlock(() -> LostWorldsBlocks.ARAUCARIA_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.ARAUCARIA_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CALAMITES_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CALAMITES_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CONIFER_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CONIFER_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CYPRESS_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.CYPRESS_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.GINKGO_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.GINKGO_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.GLASS_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.GLASS_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.SCORCHED_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.SCORCHED_WALL_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.SEQUOIA_SIGN.get());
		registerSignBlock(() -> LostWorldsBlocks.SEQUOIA_WALL_SIGN.get());
	}
}
